<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>Planner • Reports</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <script src="../assets/js/noco.js"></script>
  <script src="../assets/js/auth-lite.js"></script>
  <style>
    :root{--primary:#0056b3;--bg:#f5f7fb;--card:#fff;--border:#e5e7eb;--muted:#6b7280}
    *{box-sizing:border-box} body{margin:0;background:var(--bg);font-family:Poppins,Arial,sans-serif}
    header{display:flex;justify-content:space-between;align-items:center;padding:14px 18px;background:#fff;border-bottom:1px solid var(--border)}
    h1{font-size:18px;margin:0}
    .wrap{max-width:1100px;margin:16px auto;background:#fff;border:1px solid var(--border);border-radius:16px;box-shadow:0 10px 24px rgba(0,0,0,.05);padding:16px}
    .row{display:flex;gap:8px;flex-wrap:wrap;align-items:center}
    label{font-weight:600;font-size:.9rem}
    input,select{padding:10px;border:1px solid var(--border);border-radius:10px}
    .kpis{display:grid;grid-template-columns:repeat(3,1fr);gap:12px;margin-top:10px}
    .kpi{padding:14px;border:1px solid var(--border);border-radius:12px}
    .kpi h3{margin:0 0 6px;font-size:12px;color:#6b7280} .kpi div{font-size:24px;font-weight:700}
    table{width:100%;border-collapse:collapse;margin-top:12px} thead th,tbody td{padding:8px;border-bottom:1px solid var(--border);text-align:left}
    .btn{background:var(--primary);color:#fff;border:none;border-radius:10px;padding:8px 12px;cursor:pointer}
    .btn.secondary{background:#e9eef7;color:#111}
  </style>
</head>
<body>
  <script>Auth.ensureRole(['planner']);</script>

  <header>
    <h1>Reports</h1>
    <nav class="row">
      <a class="btn secondary" href="./planner.html">Home</a>
    </nav>
  </header>
  <script>document.addEventListener('DOMContentLoaded', ()=> Auth.injectRoleBadge('header'));</script>

  <div class="wrap">
    <div class="row">
      <div><label>From</label><br><input id="r_from" type="date"></div>
      <div><label>To</label><br><input id="r_to" type="date"></div>
      <div><label>Technician (id)</label><br><input id="r_tech" placeholder="e.g. 12"></div>
      <div><label>Intervention Type (id)</label><br><input id="r_it" placeholder="e.g. 5"></div>
      <div><label>Status</label><br>
        <select id="r_status"><option value="">(any)</option><option>assigned</option><option>in_progress</option><option>completed</option></select>
      </div>
      <div style="align-self:end"><button class="btn" onclick="runReport()">Run</button></div>
      <div style="align-self:end"><button class="btn secondary" onclick="exportCSV()">Export CSV</button></div>
    </div>

    <div class="kpis">
      <div class="kpi"><h3>Total Jobs</h3><div id="k_total">0</div></div>
      <div class="kpi"><h3>First-Time Fix</h3><div id="k_ftf">0%</div></div>
      <div class="kpi"><h3>Avg Start Δ</h3><div id="k_delta">0 min</div></div>
    </div>

    <h3 style="margin:14px 0 6px">Per Technician</h3>
    <table id="exportTable">
      <thead><tr><th>Technician ID</th><th>Jobs</th></tr></thead>
      <tbody id="r_table"><tr><td colspan="2">—</td></tr></tbody>
    </table>
  </div>

  <script>
    const { T } = NC, api = NCAPI, U = NCUTIL;

    async function runReport(){
      const from = new Date(document.querySelector('#r_from').value);
      const to   = new Date(document.querySelector('#r_to').value);
      const tech = +val('#r_tech') || null;
      const it   = +val('#r_it') || null;
      const st   = val('#r_status');

      let qs = '';
      if(!isNaN(from.getTime()) && !isNaN(to.getTime())){
        qs += `filter=(completed_at,between,${U.iso(from)},${U.iso(to)})`;
      } else {
        qs += 'limit=5000';
      }
      if(st) qs += `&filter=(status,eq,${st})`;
      if(tech) qs += `&filter=(technician_id,eq,${tech})`;
      if(it) qs += `&filter=(intervention_type_id,eq,${it})`;

      const res = await api.list(T.service_orders, qs);
      const rows = res.list || [];

      const total = rows.length;
      const ftf = rows.filter(r => (r.status||'')==='completed' && (r.return_visit_required===false || r.return_visit_required==='false')).length;
      const ftfPct = total ? Math.round(ftf/total*100) : 0;

      const withTimes = rows.filter(r=> r.scheduled_at && (r.actual_start || r.completed_at));
      const avgStartDeltaMin = Math.round(withTimes.reduce((a,r)=> a + ((new Date(r.actual_start||r.completed_at) - new Date(r.scheduled_at))/60000), 0) / Math.max(1, withTimes.length));

      set('#k_total', total); set('#k_ftf', ftfPct + '%'); set('#k_delta', (isFinite(avgStartDeltaMin)?avgStartDeltaMin:0) + ' min');

      const perTech = {};
      for(const r of rows){ perTech[r.technician_id] = (perTech[r.technician_id]||0)+1; }
      document.querySelector('#r_table').innerHTML = Object.entries(perTech).map(([techId,count])=>`
        <tr><td>${techId}</td><td>${count}</td></tr>
      `).join('') || '<tr><td colspan="2">No rows</td></tr>';
    }

    function exportCSV(){
      const table = document.querySelector('#exportTable');
      if(!table) return alert('No table to export');
      const rows = [...table.querySelectorAll('tr')].map(tr => [...tr.children].map(td => `"${(td.textContent||'').replace(/"/g,'""')}"`).join(','));
      const blob = new Blob([rows.join('\n')], { type: 'text/csv' });
      const a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = 'report.csv'; a.click();
    }

    function val(sel){ const e=document.querySelector(sel); return e? e.value : ''; }
    function set(sel,v){ const e=document.querySelector(sel); if(e) e.textContent=v; }

    document.addEventListener('DOMContentLoaded', runReport);
  </script>
</body>
</html>
